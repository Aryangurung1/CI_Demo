name: Fellowship Project CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - dev

jobs:
  docker-build-push:
    runs-on: [frontend]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Debug User and Groups
        run: |
          whoami
          groups
          ls -l /var/run/docker.sock

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker Login
        run: docker info --format '{{.Name}}'

      - name: List Docker Hub Repositories (Debug)
        run: |
          curl -u ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} \
          https://hub.docker.com/v2/namespaces/${{ secrets.DOCKERHUB_USERNAME }}/repositories

      - name: Set Docker Tag
        id: docker_tag
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            TAG="dev-${GITHUB_SHA::7}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ steps.docker_tag.outputs.tag }} ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ steps.docker_tag.outputs.tag }}

      - name: List Docker Images
        run: docker images

  docker-build-push-backend:
    runs-on: [backend]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Debug User and Groups
        run: |
          whoami
          groups
          ls -l /var/run/docker.sock

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker Login
        run: docker info --format '{{.Name}}'

      - name: List Docker Hub Repositories (Debug)
        run: |
          curl -u ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} \
          https://hub.docker.com/v2/namespaces/${{ secrets.DOCKERHUB_USERNAME }}/repositories

      - name: Set Docker Tag
        id: docker_tag
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            TAG="dev-${GITHUB_SHA::7}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Backend1
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend1:${{ steps.docker_tag.outputs.tag }} ./backend1
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend1:${{ steps.docker_tag.outputs.tag }}

      - name: Build and Push Backend2
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend2:${{ steps.docker_tag.outputs.tag }} ./backend2
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend2:${{ steps.docker_tag.outputs.tag }}

      - name: List Docker Images
        run: docker images
  docker-deployement:
    runs-on: [frontend]
    needs: [docker-build-push, docker-build-push-backend]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Debug User and Groups
        run: |
          whoami
          groups
          ls -l /var/run/docker.sock

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker Login
        run: docker info --format '{{.Name}}'

      - name: Transfer docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/

      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd /home/ubuntu
            mkdir -p backend1 backend2 frontend

            echo "DB_HOST=${{ secrets.DB_HOST }}" > ./backend1/.env
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> ./backend1/.env
            echo "DB_CLIENT=${{ secrets.DB_CLIENT }}" >> ./backend1/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> ./backend1/.env
            echo "DB_USER=${{ secrets.DB_USER }}" >> ./backend1/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./backend1/.env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> ./backend1/.env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ./backend1/.env
            echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}" >> ./backend1/.env
            echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> ./backend1/.env
            echo "PORT=${{ secrets.BACKEND1_PORT }}" >> ./backend1/.env

            cp ./backend1/.env ./backend2/.env

            echo "PORT=${{ secrets.BACKEND1_PORT }}" >> ./backend1/.env
            echo "PORT=${{ secrets.BACKEND2_PORT }}" >> ./backend2/.env

            echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" > ./frontend/.env

            echo "POSTGRES_USER=${{ secrets.DB_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env


            docker compose --env-file .env pull
            docker compose --env-file .env up -d

            docker exec backend1 yarn migrate
            docker exec backend2 yarn migrate

          EOF
