name: Fellowship Project CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
    paths:
      - frontend/**
      - backend1/**
      - backend2/**
      - docker-compose.yml
      - .github/workflows/main.yml

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Bump and Tag Version (semantic versioning)
        id: tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          release_branches: main
          default_bump: patch
          tag_prefix: "v"
          custom_release_rules: |
            feat:minor
            fix:patch
            chore:patch
            docs:patch
            refactor:patch
          bump_major_pre_major: true

      - name: Show New Tag
        run: echo "New version is ${{ steps.tag.outputs.new_tag }}"

  docker-build-push:
    runs-on: [frontend]
    needs: version-and-tag
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Image (with cache)
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build \
            --build-arg VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ needs.version-and-tag.outputs.new_tag }} ./frontend
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ needs.version-and-tag.outputs.new_tag }} ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ needs.version-and-tag.outputs.new_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload Frontend Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-${{ github.sha }}
          path: ./frontend/dist/

  docker-build-push-backend:
    runs-on: [backend]
    needs: version-and-tag
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend1 Image (with cache)
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/backend1:${{ needs.version-and-tag.outputs.new_tag }} ./backend1
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/backend1:${{ needs.version-and-tag.outputs.new_tag }} ${{ secrets.DOCKERHUB_USERNAME }}/backend1:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend1:${{ needs.version-and-tag.outputs.new_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend1:latest
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Build and Push Backend2 Image (with cache)
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/backend2:${{ needs.version-and-tag.outputs.new_tag }} ./backend2
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/backend2:${{ needs.version-and-tag.outputs.new_tag }} ${{ secrets.DOCKERHUB_USERNAME }}/backend2:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend2:${{ needs.version-and-tag.outputs.new_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend2:latest
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload Backend1 Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend1-dist-${{ github.sha }}
          path: ./backend1/dist/

      - name: Upload Backend2 Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend2-dist-${{ github.sha }}
          path: ./backend2/dist/

  docker-deployment:
    runs-on: [frontend]
    needs: [docker-build-push, docker-build-push-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Transfer docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/

      - name: SSH and Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd /home/ubuntu
            mkdir -p backend1 backend2 frontend
            echo "DB_HOST=${{ secrets.DB_HOST }}" > ./backend1/.env
            echo "PORT=${{ secrets.BACKEND1_PORT }}" >> ./backend1/.env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ./backend1/.env
            cp ./backend1/.env ./backend2/.env
            echo "PORT=${{ secrets.BACKEND2_PORT }}" >> ./backend2/.env
            echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" > ./frontend/.env
            echo "POSTGRES_USER=${{ secrets.DB_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            docker compose --env-file .env pull
            docker compose --env-file .env up -d
            docker exec backend1 yarn migrate
            docker exec backend2 yarn migrate
          EOF

  github-release:
    runs-on: ubuntu-latest
    needs: version-and-tag
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version-and-tag.outputs.new_tag }}
          name: Release ${{ needs.version-and-tag.outputs.new_tag }}
          body: |
            New release: ${{ needs.version-and-tag.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
